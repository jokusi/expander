-- eosum

specs: 		modal
constructs: 	esum osum elab olab final 
defuncts:	parity deltaEO betaEO deltaBeh betaBeh unfold h
preds: 		even odd Nat State List ->
fovars:		st w
hovars:		f

axioms:

-- acceptors of number sequences whose sum is even

states == [esum] & labels == [elab,olab] & atoms == [final] &

(esum,elab) -> esum &
(esum,olab) -> osum &
(osum,olab) -> esum &
(osum,elab) -> osum &

final -> esum &

parity$n == ite(even$n,elab,olab) &

unfold(st) == scanD(st).map(parity) &

State$esum &
State$osum &

(deltaEO(esum)$x = esum <=== even$x) &
(deltaEO(esum)$x = osum <=== odd$x) &
(deltaEO(osum)$x = esum <=== odd$x) &
(deltaEO(osum)$x = osum <=== even$x) &

betaEO$esum = 1 &
betaEO$osum = 0 &

deltaBeh(f)(x)(w) == f$x:w &
betaBeh(f) == f[] &

h(esum)[] = 1 &
(h(esum)(x:w) = h(esum)$w <=== even$x) & 
(h(esum)(x:w) = h(osum)$w <=== odd$x) & 
h(osum)[] = 0 &
(h(osum)(x:w) = h(esum)$w <=== odd$x) & 
(h(osum)(x:w) = h(osum)$w <=== even$x) 

theorems:

(Nat(x) ===> even$x | odd$x) &	      		-- used by homom 
(even$x | odd$x) 	      			-- used by homom2 
				      		
conjects:

-- h is Acc(Int)-homomorphic and thus equal to unfold:

(Nat(x) & State(st) ==> h(deltaEO(st)$x)$w = deltaBeh(h$st)(x)$w) &	
							 -- homom
(State(st) ==> betaEO$st = betaBeh$h$st) &		 -- EO_Beh
(State(st) ==> h(deltaEO(st)$x)$w = deltaBeh(h$st)(x)$w) -- homom2	

terms:

unfold(esum)[1..4] <+>	--> [final]
unfold(esum)[1..5] <+>	--> []
unfold(osum)[1..4] <+>	--> []
unfold(osum)[1..5] <+>	--> [final]

sum[1..4] <+> 		--> 10
sum[1..5] <+>		--> 15

traces(esum)(esum)      --> esum-elab-esum <+> esum-olab-osum-olab-esum


