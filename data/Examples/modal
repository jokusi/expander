-- modal

defuncts: procs noProcs rel2fun states atoms labels
          `then` or and scanD scanND scanNDS actL parent sibling << >>
          tjoin <> >< # % tcl descendant ancestor related 
	  EF AF FE FA AG EG GE GA `EU` `AU` `EW` `AW` `ER` `AR`
          -- defined in Esolve.hs or modal importing specifications:
	  trans transL preds predsL value valueL out outL unfoldD unfoldND
          true false not /\ \/ exists forall / pi1 pi2 valL child inv ; 
	  sat satR proj njoin * select tsort 
preds:    ->  exists2 forall2 
fovars:   st st' lab labs X P Q R T

axioms:

   procs == [0..noProcs-1]     

 & rel2fun(R)(st) == (get1<=<filter((=st).get0))$R

 & (exists2(R,P) <==> any(P).rel2fun$R)
 & (forall2(R,P) <==> all(P).rel2fun$R)

-- derived modal formulas (to be evaluated with eval/evalR/evalRA/evalT)

 & P`then`Q == not(P)\/Q

 & or == foldl(\/)$false
 & and == foldl(/\)$true

 & scanD$st == evalO.unfoldD$st     -- deterministic-LTS unfold
 & scanND$st == evalO.unfoldND$st   -- nondeterministic-LTS unfold
 & scanNDS$st == evalO.unfoldNDS$st -- nondeterministic-LTS unfold with silent transitions

 & actL == flip$transL

 & parent == inv.child
 & sibling(labs) == child(labs);parent$labs

 & P<<R == P/\pi1$R
 & R>>P == P/\pi2$R

 & tjoin(P)(T) == select(P).njoin$T

 & labs<>P == exists(child$labs)$P
 & labs><P == exists(parent$labs)$P        -- []><P == concatMap(trans)$P
 & labs#P == forall(child$labs)$P
 & labs%P == forall(parent$labs)$P

 & tcl(R) == mu X.(R\/(R;X))               -- transitive closure of R

 & descendant == tcl.child
 & ancestor == tcl.parent
 & related(labs) == ancestor(labs);sibling(labs);descendant$labs

 & EF$P == mu X.(P\/[]<>X)                 -- forward finally on some path
 & FE$P == mu X.(P\/[]><X)         	   -- backwards finally on some path
           				   -- = successors(P)
 & AF$P == mu X.(P\/([]#X)/\[]<>true)      -- forward finally on all paths 	
 & FA$P == mu X.(P\/([]%X)/\[]><true)      -- backwards finally on all paths 	
 & EG$P == nu X.(P/\([]<>X)\/[]#false)     -- forward generally on some path
 & GE$P == nu X.(P/\([]><X)\/[]%false)     -- backwards generally on some path
 & AG$P == nu X.(P/\[]#X)        	   -- forward generally on all paths
 & GA$P == nu X.(P/\[]%X)                  -- backwards generally on all paths

 & P`EU`Q == mu X.(Q\/P/\[]<>X)   	   -- until
 & P`AU`Q == mu X.(Q\/P/\[]#X) 	    
 & P`EW`Q == nu X.(Q\/P/\[]<>X)   	   -- weak until
 & P`AW`Q == nu X.(Q\/P/\[]#X)  
 & P`ER`Q == nu X.(Q/\P\/[]<>X)            -- release
 & P`AR`Q == nu X.(Q/\P\/[]#X)


