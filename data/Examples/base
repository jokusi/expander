-- base

defuncts: init last take drop single concatMap <=<
preds:    even odd 
fovars:	  x y z s s' m n i j k
hovars:	  F G 

axioms:

(even(n) <==> n`mod`2 = 0) &
(odd(n) <==> n`mod`2 = 1) &

[x]++s == x:s &
[]++s == s &
s++[] == s &
(x:s)++s' == x:s++s' &

init[x] == [] &
init$x:y:s == x:init$y:s &
init(s)++[last$s] == s &

last[x] == x &
last$x:y:s == last$y:s &

take(0)$s == [] &
take(n)$x:s == x:take(n-1)$s &

drop(0)$s == s &
drop(n)$x:s == drop(n-1)$s &

length$x:s == length(s)+1 &
length$init$x:s == length$s &

map(F)$x:s == F(x):map(F)$s &

single$x == [x] &

concatMap$F == concat.(map$F) &		-- monadic extension (=<<) = flip (>>=)

G<=<F == concatMap(G).F &		-- monadic composition for [ ]

x+0 == x & x+0.0 == x &
0+x == x & 0.0+x == x &

x-0 == x & x-0.0 == x &
0-x == -x & 0.0-x == -x &

x*0 == 0 & x*0.0 == 0 &
0*x == 0 & 0.0*x == 0 &
x*1 == x & x*1.0 == x &
1*x == x & 1.0*x == x &

0/x == 0 & 0.0/x == 0 &
x/1 == x & x/1.0 == x &

x**0 == 1 & x**0.0 == 1 &
0**x == 0 & 0.0**x == 0 &
x**1 == x & x**1.0 == x &
1**x == 1 & 1.0**x == 1 &

([] = x:s <==> False) &
(x:s = [] <==> False) &

([] =/= x:s <==> True) &
(x:s =/= [] <==> True) &

(x <= x <==> True) &
(x >= x <==> True) &

(x < x <==> False) &
(x < suc$x <==> True) &

(x > x <==> False) &
(suc$x > x <==> True) &
(suc(x)-y > x-y <==> True) &
(x-y > x-suc(y) <==> True) &

(x `in` [] <==> False) &
(x `NOTin` [] <==> True) 

{-
x+suc(y) == suc(x+y) &
suc(x)+y == suc(x+y) &
suc(x)-suc(y) == x-y &
x*suc(y) == x+(x*y) & 
suc(x)*y == (x*y)+y & 
x**suc(y) == x*(x**y) &

(x `in` y:s <==> x = y | x `in` s) &
(x `NOTin` y:s <==> x =/= y & x `NOTin` s) 
-}
