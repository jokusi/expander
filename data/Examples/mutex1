-- mutex1

{- Huth, Ryan, Logic in Computer Science, 14.3

   Safety:       There is at most one process in the critical section.	(1)
   Liveness:     If a process asks for entering the critical section,
	         it will enter it sometime.				(2)
   Non-blocking: Every process may ask for entering the critical 
		 section.						(3)
   No strict sequencing : 
		 Every process that has left the critical section may 
		 enter it again before another process does so. 	(4)
-}	

specs:		modal
defuncts:       start pairs drawN drawI drawL drawK drawS drawC
		live nonBlock noSeq critAway crits diffpairs
preds:   	Safe Idle Wait Crit Live NonBlock NoSeq check Reachable 
fovars:		is ws cs

axioms:

start == (procs,[],[]) & 
states == [start] &

-- state transitions

(is,ws,cs) -> branch$map(fun(i,(is-[i],ws++[i],cs)))$is &   -- i waits
(is,i:ws,[]) -> (is,ws,[i]) &    			    -- first(ws) enters
(is,ws,[i]) -> (insert(i)$is,ws,[]) &			    -- i leaves

-- 2 processes yield 9 states
-- 3 processes yield 31 states

atoms == safe:pairs & 

pairs == map($)$prodL[[idle,wait,crit],procs] &

safe   -> sat$Safe &
idle$i -> sat$Idle$i &
wait$i -> sat$Wait$i &
crit$i -> sat$Crit$i &

(Safe <==> (<=1).length.get2) &
(Idle$i <==> (i `in`).get0) &
(Wait$i <==> (i `in`).get1) &
(Crit$i <==> (i `in`).get2) &

live$i == wait(i) `then` AF$crit$i &			

nonBlock$i == idle(i) `then` []<>wait$i &

noSeq$i == EF(crit(i)/\
              (crit(i)`EU`not(crit$i)/\
                          (not(critAway$i)`EU`crit$i))) &

critAway$i == or$map(crit)$procs-[i] & 

crits == map(crit)$procs &

diffpairs == filter(=/=)$prodL$[procs,procs] &

-- widget interpreters

drawN == wtree $ fun(st,text$index(st,states)) &

drawI == wtree $ fun(st,color(index(st,states),length$states)$circ$11) &

drawL == wtree(2,fun((st,k,n),color(k,n)$circ$11)) &

drawK == wtree $ fun(st,mat$filter(check$st)$pairs) &

(check(st)(idle,i) <==> Idle(i)$st) &
(check(st)(wait,i) <==> Wait(i)$st) &
(check(st)(crit,i) <==> Crit(i)$st) &

(Reachable$st <=== st = (procs,[],[])) &
(Reachable$st <=== Reachable(is,ws,cs) & i `in` is & st = (is-[i],ws++[i],cs)) &
(Reachable$st <=== Reachable(is,i:ws,[]) & st = (is,ws,[i])) &
(Reachable$st <=== Reachable(is,ws,[i]) & st = (insert(i)$is,ws,[]))

conjects:

(Reachable$st ==> Safe$st) 	--> True	induction ?

terms: 

eval(or$crits) <+>   --> [([1],[],[0]),([],[1],[0]),([0],[],[1]),[],[0],[1])]
eval(not$crit$1) <+> --> [([0,1],[],[]),([1],[0],[]),([0],[1],[]),([],[0,1],[])
		     --   ([1],[],[0]),([],[1,0],[]),([],[1],[0])]

eval$safe <+>							--> states
eval$live$1 <+>							--> states
eval$nonBlock$1 <+>						--> states
eval$noSeq$1 <+>						--> states

eval$and$map(live)$procs <+>					--> states
eval$and$map(nonBlock)$procs <+>				--> states
eval$and$map(noSeq)$procs <+>					--> states
eval$and$map($)$prodL[[live,nonBlock,noSeq],procs] <+>		--> states

eval$EF$or$crits <+>						--> states
eval$EF$and$crits <+>						--> []
initState$EF$or$crits <+>					--> states ?
initState$EF$and$crits <+>					--> [] ?
eval$and(EF.crit)$procs <+>					--> states
eval$or$map(fun((i,j),EF$crit(i)/\crit$j))$diffpairs <+>	--> []
eval$and$map(fun((i,j),EF$crit(i)\/crit$j))$diffpairs <+>	--> states

eval$idle(1)`EU`wait$1 <+>  -->  [([0],[1],[]),([],[1,0],[]),([],[0,1],[]),
		      	    --    ([],[1],[0]),([0,1],[],[]),([1],[0],[]),
		  	    --    ([1],[],[0])]            
evalG$idle(1)`EU`wait$1     -->  iEUw.eps
 
