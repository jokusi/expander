-- brzozowski

constructs: 	+ * star mt eps a b c int
defuncts: 	delta beta step S A B reg 
preds:		RegExp
copreds:	~
fovars: 	t u v w 

axioms:

(RegExp$x <=== x `in` [a,b,c,mt,eps,int]) &
(RegExp$t+u <=== RegExp$t & RegExp$u) &
(RegExp$t*u <=== RegExp$t & RegExp$u) &
(RegExp$star$t <=== RegExp$t) &

-- (delta(t*u,x) = delta(t,x)*u <=== beta$t=0) &  	-- see seqparP
-- (delta(t*u,x) = delta(t,x)*u+delta(u,x) <=== beta$t=1) &

delta(t*u,x) == delta(t,x)*u+ite(beta$t=0,mt,delta(u,x)) & 
delta(t+u,x) == delta(t,x)+delta(u,x) &
delta(star$t,x) == delta(t,x)*star(t) &
delta(int,x) == ite(Int$x,eps,mt) &
(x `in` [a,b,c,mt,eps] ==> delta(x,y) == ite(x=y,eps,mt)) &

beta$t+u == max(beta$t,beta$u) &
beta$t*u == beta(t)*beta(u) &
beta$eps == 1 &
beta$star$t == 1 &

x*max(y,z) == max(x*y,x*z) &		-- (5) see FCAM, Example SEQPAR

(x `in` [a,b,c,mt,int] ==> beta(x) == 0) &

t+mt == t & 				-- (2) see FCAM, Example SEQPAR
mt+t == t &
t+t == t &
t*eps == t &
eps*t == t &
t*mt == mt &
mt*t == mt &

t+ite(x,u,v) == ite(x,t+u,t+v) &	-- (4) see FCAM, Example SEQPAR
ite(x,u,v)+t == ite(x,u+t,v+t) &		

(x `in` y:s <==> x = y | x `in` s) &	-- see regexpP

reg$1 == star$a+b*c &
reg$2 == star$a+int*c &

-- CF grammar

step$S == a*B+b*A+eps &			-- accepts words with the same
step$A == a*S+b*A*A &			-- number of a's and b's
step$B == b*S+a*B*B &

-- (t ~ u ===> beta$t = beta$u & delta(t,x) ~ delta(u,x)) 

(t ~ u ===> beta$t = beta$u & all(rel(x,delta(t,x)~delta(u,x)))[a,b])

theorems:

(beta$t = 0 | beta$t = 1) &		-- (6) see FCAM, Example SEQPAR
(t+u)+(v+w) = (t+v)+(u+w) &		-- (3) see FCAM, Example SEQPAR
t*(u+v) = t*u+t*v &
(u+v)*t = u*t+v*t &
(t+u)+v = t+(u+v) 

-- (max(x*y,y) = y <=== x = 0 | x = 1) &

-- (t+u ~0 v+w <=== t ~0 v & u ~0 w) &  -- ~0 is a bisimulation modulo +
-- t ~0 t				-- and reflexive	(7)

conjects:

star(a+b) ~ star(star(a)*star(b)) &	-- rosu3-4 (Rosu, Example 3.4)
					-- 3 x coinduction + 3 x narrowing

star(t+u) ~ star(star(t)*star(u)) &	-- rosu3-4V	

star(a)*b ~ a*star(a)*b+b &		-- rosu3-6 (Rosu, Example 3.6)
					-- 1 x coinduction + 1 x narrowing

star(t)*u ~ t*star(t)*u+u &		-- rosu3-6V	
					-- 1 x coinduction + theorems

t*(u+v) ~ t*u+t*v &			-- seqpar (FCAM, Example SEQPAR)
					-- 1 x coinduction + (3),(6),(7)
					-- + substitutions

(RegExp$t ==> beta$t = 0 | beta$t = 1)	-- regexp
					-- 1 x induction
terms:

unfoldBro(reg$1)[a,b,c,a] 	  <+>   --> 1	
unfoldBro(reg$1)[b,c,a,c] 	  <+>	--> 0	
unfoldBro(reg$2)[a,5,c,a]	  <+>	--> 1	
unfoldBro(reg$2)[a,5,c,a,a,566,c] <+>	--> 1	
unfoldBro(reg$2)[a,c,67,a] 	  <+>	--> 0	

-- unfoldBro(S) accepts words with an equal number of a's and b's

unfoldBro(S)[a,b]   		  <+>	--> 1	
unfoldBro(S)[a,b,a]  		  <+>	--> 0	
unfoldBro(S)[a,b,a,b,a,a,b,a,b,b,a,b,a,a,b,a,b,b,b,a,b,a] 
				  <+> 	--> 1
unfoldBro(S)$replicate(5)(a)++replicate(5)(b)		      
					--> 1


