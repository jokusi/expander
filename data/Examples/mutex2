-- mutex2

specs:   	modal
defuncts:       start pairs searchP filterP maxticket wait decr 
		enter leave live nonBlock noSeq critAway
preds:		anyP allP Safe Idle Wait Crit Reachable

-- procs = indices$st, st = [x0,...,x(noProcs-1)]
-- xi = 0   ==>  i is idle
-- xi > 0   ==>  xi is ticket of process i 
-- xi = -1  ==>  i is in the critical section

axioms:

(anyP(P)$s <==> any(P.(s!!))$procs) &	  

(allP(P)$s <==> all(P.(s!!))$procs) &	  

searchP(P)$s == search(P.(s!!))$procs &

filterP(P)$s == filter(P.(s!!))$procs &

wait(st)$x == branch$map(flip(upd$st)$x)$filterP(=0)$st &

enter$st == map(decr)$upd(st)(searchP(=1)$st)(-1) &

leave(st) == upd(st)(searchP(= -1)$st)$0 &

decr$x == ite(x>0,x-1,x) &

maxticket == max.filter(=/= -1) &

start == replicate(noProcs)$0 &                    -- = take(noProcs)$mu s.(0:s)

states == [start] &

-- state transitions
	 
(maxticket$st = m & m < noProcs ==> st -> wait(st)$m+1) & -- some idle waits	
(anyP(>0)$st & allP(>=0)$st ==> st -> enter$st) &         -- first wait enters 
(anyP(= -1)$st ==> st -> leave$st) &		          -- first crit leaves	

-- 2 processes yield 9 states
-- 3 processes yield 31 states

atoms == safe:pairs & 

pairs == map($)$prodL[[idle,wait,crit],procs] &

safe -> sat$Safe &
idle$i -> sat$Idle$i &
wait$i -> sat$Wait$i &
crit$i -> sat$Crit$i &

(Safe <==> (<=1).length.filterP(= -1)) &
(Idle(i)$st <==> st!!i = 0) &
(Wait(i)$st <==> st!!i > 0) &
(Crit(i)$st <==> st!!i = -1) &

live$i == wait(i) `then` AF$crit$i &			

nonBlock$i == idle(i) `then` []<>wait$i &

noSeq$i == EF(crit(i)/\
              (crit(i)`EU`not(crit$i)/\
                          (not(critAway$i)`EU`crit$i))) &

critAway$i == or$map(crit)$procs-[i] & 

(Reachable$st <=== all(=0)$st) &
(Reachable$st'
    <=== Reachable$st & maxticket$st = m & m < noProcs & i `in` filterP(=0)$st &
         st' = upd(st)(i)$m+1) &
(Reachable$st'
    <=== Reachable$st & anyP(>0)$st & allP(>=0)$st & st' = enter$st) &
(Reachable$st'
    <=== Reachable$st & anyP(=crit)$st & allP(>=0)$st & st' = leave$st) 

conjects:

states = eval$[]<>true & 	--> True
(Reachable$st ==> Safe$st) 	--> True	induction ?

terms:

eval$[]<>true <+>					--> states 

eval$safe <+>						--> states
eval$live$1 <+>						--> states
eval$nonBlock$1 <+>					--> states
eval$noSeq$1 <+>					--> states
eval$and$map($)$prodL[[live,nonBlock,noSeq],procs] <+>	--> states

evalG$idle(1)`EU`wait$1 				--> iEUw2.eps

